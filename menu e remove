#include <stdlib.h>

void mostraMenu() {
	
	int opcao = 0;
	
	printf("Digite o numero correspondente a opcao desejada: \n");
	printf("1. Inserir processo na memoria\n");
	printf("2. Remover processo da memoria\n");
	printf("3. Listar estado das memorias\n");
	printf("4. Finalizar aplicacao\n");
	
	scanf("%i", &opcao);
	
	switch (opcao) {
		case 1:
			int tam = 0;
			printf("Qual o tamanho do processo a ser inserido?\n");
			scanf("%i", &tam);
			
			//insereFirstFit(memoria_ff, tam);
			//insereBestFit(memoria_bf, tam);
			//insereWorstFit(memoria_wf, tam);
			//insereCircularFit(memoria_cf, tam);
			
			break;
			
		case 2:
			int pid = 0;
			printf("Qual o PID do processo a ser removido?\n");
			scanf("%i", &pid);
			
			//removeProcesso(memoria_ff, pid);
			//removeProcesso(memoria_bf, pid);
			//removeProcesso(memoria_wf, pid);
			//removeProcesso(memoria_cf, pid);
			
			break;
			
		case 3:
			printf("Memoria First Fit: \n");
			// funcao
			printf("Memoria Best Fit: \n");
			// funcao
			printf("Memoria Worst Fit: \n");
			// funcao
			printf("Memoria Circular Fit: \n");
			// funcao
			break;

		case 4:
			printf("Aplicacao finalizada\n");
			exit(0);

		default:
			printf("Opcao Invalida");
	}
}

void removeProcesso(int *vetor, int pidProcesso) {
	int contTamProcesso = 0;

	for(int i = 0; i < TAM - 1; i++) {
		if (vetor[i] == pidProcesso) {
			vetor[i] = 0;
			contTamProcesso++;
		}
	}
	
	if(contTamProcesso == 0) {
		printf("O processo nao existe na memoria\n");
	} else {
		printf("Processo removido com sucesso. Unidades de memoria liberadas: %i\n", contTamProcesso);
	}
}

int main() {

	int memoria_ff[TAM];
	inicializaMemoria(memoria_ff);

	int exec = 1;

	while (exec == 1) {
		mostraMenu();
	}
}

